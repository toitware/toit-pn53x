Application note. Easy Start: https://www.nxp.com/docs/en/nxp/application-notes/AN133910.pdf
Firmware manual: https://www.nxp.com/docs/en/user-guide/141520.pdf
Elechouse manual (not particularly useful): https://www.elechouse.com/elechouse/images/product/PN532_module_V3/PN532_%20Manual_V3.pdf
elechouse schematics: https://www.elechouse.com/elechouse/images/product/PN532_module_V3/PN532_shematic_drowing.pdf

Adafruit library: https://github.com/adafruit/Adafruit-PN532
Apparently the chip uses i2c clock stretching. Not sure that's supported needs to be tested.

In SPI mode one has to wait for the sensor to be ready again after getting an ACK.
https://github.com/adafruit/Adafruit-PN532/blob/master/Adafruit_PN532.cpp#L320


16:RX
17:TX

Adafruit seems to expose the reset pin.
The elechouse board ties the reset to vcc.


All communication with the device should use timeouts and try again. We don't completely know the
oscillator frequency and how long the chip might need to wake up. Maybe something we can find out.

add communication.read_ack that also handles error frames.
My current understanding is that i2c may read more data than is available. This way we can deal with
  variable-sized frames.
Also, it seems to be safe to do this, when the device isn't ready. That is, one can read in a loop
the max amount of bytes and just discard any read data that starts with 0x00. All the remaining bytes
are then 0x80:
  #[0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]

It should thus be possible to not have the irq pin and repeatedly read on the i2c bus looking at the
first byte.

On the serial port that's not the case, but there we are able to correctly read frames.
However, having a separate read_ack would be nicer.

I haven't looked into i2c yet.
